#include <Wire.h> #include <U8g2lib.h> 

// --- Motor A pins (Left) --- #define AIN1 32 #define AIN2 15 #define PWMA 14 

// --- Motor B pins (Right) --- #define BIN1 33 #define BIN2 27 #define PWMB 12 

// --- Standby pin --- #define STBY 13 // must be HIGH to enable TB6612 

// --- Encoder pins (Left motor) --- #define ENC_A_LEFT 34 // White -> A2 #define ENC_B_LEFT 5 // Yellow -> SCK 

// --- Encoder pins (Right motor) --- #define ENC_A_RIGHT 36 // White -> A4 #define ENC_B_RIGHT 39 // Yellow -> A3 

// --- Button pin --- #define BTN_PIN 26 // active-LOW 

// --- OLED setup --- #define SDA_PIN 22 #define SCL_PIN 20 U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2( U8G2_R0, /* reset=/ U8X8_PIN_NONE, / clock=/ SCL_PIN, / data=*/ SDA_PIN); 

// Motor specs (Adafruit 4416) #define GEAR_RATIO 20.4 #define ENCODER_TICKS 14 

// --- Encoder variables --- volatile unsigned long lastTimeLeft = 0, periodLeft = 0; volatile bool dirLeft = true; volatile unsigned long lastTimeRight = 0, periodRight = 0; volatile bool dirRight = true; 

// --- Button state --- bool motorsOn = false; 

// --- ISRs --- void IRAM_ATTR handleLeftA() { unsigned long now = micros(); if (lastTimeLeft > 0) periodLeft = now - lastTimeLeft; lastTimeLeft = now; dirLeft = digitalRead(ENC_B_LEFT); } void IRAM_ATTR handleRightA() { unsigned long now = micros(); if (lastTimeRight > 0) periodRight = now - lastTimeRight; lastTimeRight = now; dirRight = digitalRead(ENC_B_RIGHT); } 

void setup() { Serial.begin(115200); 

// Motor pins pinMode(AIN1, OUTPUT); pinMode(AIN2, OUTPUT); pinMode(PWMA, OUTPUT); pinMode(BIN1, OUTPUT); pinMode(BIN2, OUTPUT); pinMode(PWMB, OUTPUT); pinMode(STBY, OUTPUT); digitalWrite(STBY, HIGH); 

// Encoders pinMode(ENC_A_LEFT, INPUT); pinMode(ENC_B_LEFT, INPUT); pinMode(ENC_A_RIGHT, INPUT); pinMode(ENC_B_RIGHT, INPUT); attachInterrupt(digitalPinToInterrupt(ENC_A_LEFT), handleLeftA, RISING); attachInterrupt(digitalPinToInterrupt(ENC_A_RIGHT), handleRightA, RISING); 

// Button pinMode(BTN_PIN, INPUT_PULLUP); 

// OLED Wire.begin(SDA_PIN, SCL_PIN, 100000); u8g2.begin(); u8g2.setFont(u8g2_font_6x12_tr); 

Serial.println("Dual motor + encoder + OLED + button ready"); } 

void loop() { // --- Button toggle --- static bool lastBtn = HIGH; bool btn = digitalRead(BTN_PIN); if (lastBtn == HIGH && btn == LOW) { motorsOn = !motorsOn; delay(200); // debounce } lastBtn = btn; 

// --- Control motors --- if (motorsOn) { // Left Motor (flipped direction) digitalWrite(AIN1, HIGH); digitalWrite(AIN2, LOW); analogWrite(PWMA, 128); 

// Right Motor (as-is) 
digitalWrite(BIN1, LOW); 
digitalWrite(BIN2, HIGH); 
analogWrite(PWMB, 128); 
  

} else { // Motors OFF digitalWrite(AIN1, LOW); digitalWrite(AIN2, LOW); analogWrite(PWMA, 0); 

digitalWrite(BIN1, LOW); 
digitalWrite(BIN2, LOW); 
analogWrite(PWMB, 0); 
  

} 

// --- Calculate RPMs --- float rpmLeft = 0, rpmRight = 0; if (periodLeft > 0) rpmLeft = (1e6 / (float)periodLeft) * 60.0 / (ENCODER_TICKS * GEAR_RATIO); if (periodRight > 0) rpmRight = (1e6 / (float)periodRight) * 60.0 / (ENCODER_TICKS * GEAR_RATIO); 

// --- Serial print --- Serial.print("Left Motor - Dir: "); Serial.print(dirLeft ? "Fwd" : "Rev"); Serial.print(" | RPM: "); Serial.print(rpmLeft, 2); Serial.print(" || Right Motor - Dir: "); Serial.print(dirRight ? "Fwd" : "Rev"); Serial.print(" | RPM: "); Serial.println(rpmRight, 2); 

// --- OLED display --- u8g2.clearBuffer(); u8g2.setCursor(0, 12); u8g2.print(motorsOn ? "Motors: ON" : "Motors: OFF"); u8g2.setCursor(0, 28); u8g2.print("Left RPM: "); u8g2.print(rpmLeft, 1); u8g2.setCursor(0, 44); u8g2.print("Right RPM: "); u8g2.print(rpmRight, 1); u8g2.setCursor(0, 60); u8g2.print("BTN26 toggles motors"); u8g2.sendBuffer(); 

delay(200); } 

 
